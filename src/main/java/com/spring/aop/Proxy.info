proxy:
    为某个对象提供一个代理，以控制对这个对象的访问。 代理类和委托类有共同的父类或父接口，这样在任何使用委托类对象的地方都可以用代理对象替代。
代理类负责请求的预处理、过滤、将请求分派给委托类处理、以及委托类执行完请求后的后续处理。




一.静态代理:
    代理接口 Subject
    委托类，具体处理业务。RealSubject
    静态代理类 ProxySubject


静态代理类优缺点
    优点：业务类只需要关注业务逻辑本身，保证了业务类的重用性。这是代理的共有优点。
    缺点：
    1）代理对象的一个接口只服务于一种类型的对象，如果要代理的方法很多，势必要为每一种方法都进行代理，静态代理在程序规模稍大时就无法胜任了。
    2）如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。


优缺点
    优点：
    1、直观感受，静态代理是实实在在的存在的，我们自己写的。
    2、在编译期加入，提前就指定好了谁调用谁，效率高。

    缺点：
    同样，它的优点也成了它致命的缺点。
    1、静态代理很麻烦，需要大量的代理类
         当我们有多个目标对象需要代理时，我就需要建立多个代理类，改变原有的代码，改的多了就很有可能出问题，必须要重新测试。
    2、重复的代码会出现在各个角落里，违背了一个原则：重复不是好味道
          我们应该杜绝一次次的重复。
    3、在编译期加入，系统的灵活性差

二.动态代理
1.java Proxy API:
    1).java.lang.reflect.Proxy:
        // 方法 1: 该方法用于获取指定代理对象所关联的调用处理器
        static InvocationHandler getInvocationHandler(Object proxy)

        // 方法 2：该方法用于获取关联于指定类装载器和一组接口的动态代理类的类对象
        static Class getProxyClass(ClassLoader loader, Class[] interfaces)

        // 方法 3：该方法用于判断指定类对象是否是一个动态代理类
        static boolean isProxyClass(Class cl)

        // 方法 4：该方法用于为指定类装载器、一组接口及调用处理器生成动态代理类实例
        static Object newProxyInstance(ClassLoader loader, Class[] interfaces, InvocationHandler h)

    2).java.lang.reflect.InvocationHandler
         // 该方法负责集中处理动态代理类上的所有方法调用。第一个参数既是代理类实例，第二个参数是被调用的方法对象
         // 第三个方法是调用参数。调用处理器根据这三个参数进行预处理或分派到委托类实例上反射执行
         Object invoke(Object proxy, Method method, Object[] args)

    3）java.lang.ClassLoader
        这是类装载器类，负责将类的字节码装载到 Java 虚拟机（JVM）中并为其定义类对象，然后该类才能被使用。Proxy 静态方法生成动态代理类同样需要通过类装载器来进行装载才能使用，
        它与普通类的唯一区别就是其字节码是由JVM 在运行时动态生成的而非预存在于任何一个 .class 文件中。
        每次生成动态代理类对象时都需要指定一个类装载器对象


2.动态代理机制特点:
    1）包：如果所代理的接口都是 public 的，那么它将被定义在顶层包（即包路径为空），如果所代理的接口中有非 public 的接口（因为接口不能被定义为 protect 或 private，所以除 public 之外就是默认的 package 访问级别），
        那么它将被定义在该接口所在包（假设代理了 com.ibm.developerworks 包中的某非 public 接口 A，那么新生成的代理类所在的包就是 com.ibm.developerworks），
        这样设计的目的是为了最大程度的保证动态代理类不会因为包管理的问题而无法被成功定义并访问；
    2）类修饰符：该代理类具有 final 和 public 修饰符，意味着它可以被所有的类访问，但是不能被再度继承；
    3）类名：格式是“$ProxyN”，其中 N 是一个逐一递增的阿拉伯数字，代表 Proxy 类第 N 次生成的动态代理类，值得注意的一点是，并不是每次调用 Proxy 的静态方法创建动态代理类都会使得 N 值增加，
        原因是如果对同一组接口（包括接口排列的顺序相同）试图重复创建动态代理类，它会很聪明地返回先前已经创建好的代理类的类对象，
        而不会再尝试去创建一个全新的代理类，这样可以节省不必要的代码重复生成，提高了代理类的创建效率。
    4）类继承关系

3.动态代理的优点和美中不足
    优点：
    动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理（InvocationHandler.invoke）。这样，在接口方法数量比较多的时候，我们可以进行灵活处理，
    而不需要像静态代理那样每一个方法进行中转。在本示例中看不出来，因为invoke方法体内嵌入了具体的外围业务（记录任务处理前后时间并计算时间差），
    实际中可以类似Spring AOP那样配置外围业务。

    美中不足：
    诚然，Proxy 已经设计得非常优美，但是还是有一点点小小的遗憾之处，那就是它始终无法摆脱仅支持 interface 代理的桎梏，
    因为它的设计注定了这个遗憾。回想一下那些动态生成的代理类的继承关系图，它们已经注定有一个共同的父类叫 Proxy。
    Java 的继承机制注定了这些动态代理类们无法实现对 class 的动态代理，原因是多继承在 Java 中本质上就行不通。

4.优点：
  1、一个动态代理类更加简单了，可以解决创建多个静态代理的麻烦，避免不断的重复多余的代码
  2、调用目标代码时，会在方法“运行时”动态的加入，决定你是什么类型，才调谁，灵活

  缺点：
  1、系统灵活了，但是相比而言，效率降低了，比静态代理慢一点
  2、动态代理比静态代理在代码的可读性上差了一点，不太容易理解
  3、JDK动态代理只能对实现了接口的类进行代理


5.Java 动态代理。具体有如下四步骤：
    通过实现 InvocationHandler 接口创建自己的调用处理器；
    通过为 Proxy 类指定 ClassLoader 对象和一组 interface 来创建动态代理类；
    通过反射机制获得动态代理类的构造函数，其唯一参数类型是调用处理器接口类型；
    通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数被传入。

三.CglibProxy与JDKProxy
1.JDKProxy：
    * 实现InvocationHandler
    * 使用Proxy.newProxyInstance产生代理对象
    * 被代理的对象必须要实现接口
2.CglibProxy:
    必须依赖于CGLib的类库(cglib.jar,asm.jar)，但是它需要类来实现任何接口代理的是指定的类生成一个子类，覆盖其中的方法，是一种继承(Hibernate)
    /**
     * jar
     * asm-2.2.3.jar
     * asm-commons-2.2.3.jar
     * asm-util-2.2.3.jar
     * cglib-nodep-2.1_3.jar
     *
     */

Spring中AOP代理：
    java动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。
    而cglib动态代理是利用asm开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。
    1、如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP
    2、如果目标对象实现了接口，可以强制使用CGLIB实现AOP
    3、如果目标对象没有实现了接口，必须采用CGLIB库，spring会自动在JDK动态代理和CGLIB之间转换


DefaultAopProxyFactory
@Override
public AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException {
    if (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) {
        Class<?> targetClass = config.getTargetClass();
        if (targetClass == null) {
            throw new AopConfigException("TargetSource cannot determine target class: " +
                    "Either an interface or a target is required for proxy creation.");
        }
        if (targetClass.isInterface()) {
            return new JdkDynamicAopProxy(config);
        }
        return new ObjenesisCglibAopProxy(config);
    }
    else {
        return new JdkDynamicAopProxy(config);
    }


 <<Interface>>InstantiationStrategy
                         |
                         |
            SimpleInstantiationStrategy
                         |
                         |
           CglibSubclassingInstantiationStrategy

   对于CglibSubclassingInstantiationStrategy，有这么一句注释：
   Default object instantiation strategy for use in BeanFactories.